from bot import bot, dp, env
from aiogram import types
from keyboards.keyboard_user import *
from data.models import UserBot, session

import os, random

LEVELS = {
    5: "–ú–ª–∞–¥–µ–Ω—Ü",
    15: "–ú–∞–ª—å—á–∏–∫",
    30: "–Æ–Ω–æ—à–∞",
    50: "–°–æ–ª–¥–∞—Ç",
    75: "–ú—É–∂—á–∏–Ω–∞",
    100: "–ü–æ–∂–∏–ª–æ–π",
    150: "–°—Ç–∞—Ä–∏–∫"
}


async def update_level(tg_id):
    user = session.query(UserBot).filter(UserBot.telegram_id == tg_id).first()
    user.message_count += 1
    if user.message_count in LEVELS.keys():
        user.level = LEVELS[user.message_count]
        await bot.send_message(tg_id, f"–í–∞—à —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω –¥–æ '{LEVELS[user.message_count]}'")
    session.add(user)
    session.commit()


@dp.message_handler(commands=['start'])
async def start_chat(message: types.Message):
    try:
        user = UserBot(telegram_id=message.from_user.id)
        session.add(user)
        session.commit()
        await bot.send_message(message.from_user.id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –∫ –±–æ—Ç—É\n"
                                                f"–£—Ä–æ–≤–µ–Ω—å: {user.level}\n"
                                                f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {user.date_created.strftime('%d/%m/%Y')}", reply_markup=keyboard_1)
    except:
        await bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–∏–∞—Ç—É—Ä–æ–π", reply_markup=keyboard_1)
        await update_level(message.from_user.id)


@dp.message_handler(commands=['help', 'info'])
@dp.message_handler(lambda message: message.text == "–ü–æ–º–æ—â—å üîé")
async def answer_message(message: types.Message):
    query_result = session.query(UserBot).filter(UserBot.telegram_id == message.from_user.id).count()
    if query_result == 0:
        await message.reply("–ù–æ–≤—ã–º –ø–æ–ª—å–∑–∞–≤—Ç–µ–ª—è–º –Ω–∞–¥–æ –Ω–∞–∂–∞—Ç—å /start")
        await message.delete()
    else:
        await bot.send_message(message.chat.id, "–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–º–∞–Ω–¥", reply_markup=keyboard_1)
        await update_level(message.from_user.id)

# @dp.message_handler(commands=['geo'])
# async def answer_message(message: types.Message):
#     await bot.send_message(message.from_user.id, "–≥.–°–∞–º–∞—Ä–∞\n"
#                                                  "—É–ª.–õ–µ–Ω–∏–Ω–∞ –¥.7")

@dp.message_handler(commands=['photo_random'])
@dp.message_handler(lambda message: message.text == "üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–º—á–∏–∫")
async def send_mems_random(message:types.Message):
    query_result = session.query(UserBot).filter(UserBot.telegram_id == message.from_user.id).count()
    if query_result == 0:
        await message.reply("–ù–æ–≤—ã–º –ø–æ–ª—å–∑–∞–≤—Ç–µ–ª—è–º –Ω–∞–¥–æ –Ω–∞–∂–∞—Ç—å /start")
        await message.delete()
    else:
        path_img = env("IMAGES_FOLDER")
        image = random.choice(os.listdir(path_img))
        with open(path_img + "\\" + image, 'rb') as f:
            await bot.send_photo(message.chat.id, f, caption="–í–æ—Ç —Ñ–æ—Ç–æ!")
            await update_level(message.from_user.id)


@dp.message_handler()
async def check_chat(message: types.Message):
    query_result = session.query(UserBot).filter(UserBot.telegram_id == message.from_user.id).count()
    if query_result == 0:
        await message.reply("–ù–æ–≤—ã–º –ø–æ–ª—å–∑–∞–≤—Ç–µ–ª—è–º –Ω–∞–¥–æ –Ω–∞–∂–∞—Ç—å /start")
        await message.delete()
    else:
        await update_level(message.from_user.id)